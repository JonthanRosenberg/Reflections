Lesson2

What happens when you initialize a repository? Why do you need to do it?

When I initialize a repository, a collection of meta data about the files located in the dir is being created which gonna help me control the versions of the project.



How is the staging area different from the working directory and the repository? What value do you think it offers?

the staging area is a middle area between files who were updated in some way and needed to be commited, and the files already commited. you add the appropriate files to this stage and when you are ready you make a commit to transfer them to the repository as part of a new version of the project. (the files are originally part of the working dir, so you can say that the staging area is right between the working dir and the repository).



How can you use the staging area to make sure you have one commit per logical change?

make sure there is only one file at the staging area that has change in him, and commit only him.



What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches may be useful when we want to make a different or experimental version of my project and not change anything else.




How do the diagrams help you visualize the branch structure?

The diagrams helps us by showing the father-son relationships in the workflow tree.


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

the result is one branch contining the merge of both branches's commits. 






What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

git automatic merging is very easy and comfortable but sometimes can get caught in conflicts. to resolve them we need to manually figure out what was wrong. there is no need for manual merging if the merge is very obvious, so thats why automatic merging is so useful.